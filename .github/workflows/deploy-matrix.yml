# name: Build and Deploy and Rollback to EKS

# on:
#   push:
#     branches:
#       - main
#   workflow_dispatch:

# env:
#   AWS_REGION: us-east-1
#   EKS_CLUSTER_NAME: group20-final-eks-cluster
#   IMAGE_TAG: ${{ github.sha }}

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     strategy:
#       matrix:
#         include:
#           - service: accountingservice
#             dockerfile: ./src/accounting/Dockerfile
#           - service: cart
#             dockerfile: ./src/cart/src/Dockerfile
#           - service: checkoutservice
#             dockerfile: ./src/checkout/Dockerfile
#           - service: currencyservice
#             dockerfile: ./src/currency/Dockerfile
#           - service: emailservice
#             dockerfile: ./src/email/Dockerfile
#           - service: frontend
#             dockerfile: ./src/frontend/Dockerfile
#     outputs:
#       image_tags: ${{ steps.export.outputs.image_tags }}

#     steps:
#     - name: Checkout Code
#       uses: actions/checkout@v3

#     - name: Configure AWS Credentials
#       uses: aws-actions/configure-aws-credentials@v2
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: ${{ secrets.AWS_REGION }}

#     - name: Login to Amazon ECR
#       run: |
#         aws ecr get-login-password | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

#     - name: Build and Push Docker Image for ${{ matrix.service }}
#       run: |
#         IMAGE_URI=${{ secrets.ECR_REGISTRY }}/${{ matrix.service }}:${{ env.IMAGE_TAG }}
#         docker build -t $IMAGE_URI -f ${{ matrix.dockerfile }} .
#         docker push $IMAGE_URI

#     - name: Update Kubeconfig
#       run: |
#         aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION

#     - name: Deploy ${{ matrix.service }} to EKS
#       run: |
#         IMAGE_URI=${{ secrets.ECR_REGISTRY }}/${{ matrix.service }}:${{ env.IMAGE_TAG }}
#         kubectl set image deployment/${{ matrix.service }}           ${{ matrix.service }}=$IMAGE_URI
#         kubectl rollout status deployment/${{ matrix.service }} --timeout=60s

#     - name: Rollback ${{ matrix.service }} on Failure
#       if: failure()
#       run: |
#         echo "Rolling back ${{ matrix.service }}..."
#         kubectl rollout undo deployment/${{ matrix.service }}
name: Build, Deploy, and Rollback to EKS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  EKS_CLUSTER_NAME: group20-final-eks-cluster
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # - service: accountingservice
          #   dockerfile: ./src/accounting/Dockerfile
          - service: cart
            dockerfile: ./src/cart/src/Dockerfile
          # - service: checkoutservice
          #   dockerfile: ./src/checkout/Dockerfile
          # - service: currencyservice
          #   dockerfile: ./src/currency/Dockerfile
          # - service: emailservice
          #   dockerfile: ./src/email/Dockerfile
          # - service: frontend
          #   dockerfile: ./src/frontend/Dockerfile
          - service: emailservice
            dockerfile: ./src/email/Dockerfile

    outputs:
      image_tags: ${{ steps.export.outputs.image_tags }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to ECR
        run: |
          aws ecr get-login-password | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

      - name: Ensure ECR Repository Exists
        run: |
          aws ecr describe-repositories --repository-names otel-demo/${{ matrix.service }} ||           aws ecr create-repository --repository-name otel-demo/${{ matrix.service }}
          
      - name: Build and Push Image
        run: |
          IMAGE_URI=${{ secrets.ECR_REGISTRY }}/${{ matrix.service }}:${{ env.IMAGE_TAG }}
          docker build -t $IMAGE_URI -f ${{ matrix.dockerfile }} .
          docker push $IMAGE_URI

  deploy:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [cartservice, emailservice]
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}        

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION

      - name: Deploy to EKS
        run: |
          IMAGE_URI=${{ secrets.ECR_REGISTRY }}/${{ matrix.service }}:${{ env.IMAGE_TAG }}
          kubectl set image deployment/${{ matrix.service }} ${{ matrix.service }}=$IMAGE_URI
          kubectl rollout status deployment/${{ matrix.service }} --timeout=60s

  rollback:
    needs: deploy
    if: failure()
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [cartservice, emailservice]
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION

      - name: Rollback Deployment
        run: |
          echo "Rolling back ${{ matrix.service }} to last stable image..."
          kubectl rollout undo deployment/${{ matrix.service }}
